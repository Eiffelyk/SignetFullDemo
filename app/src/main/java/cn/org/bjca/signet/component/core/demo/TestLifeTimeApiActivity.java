package cn.org.bjca.signet.component.core.demo;import android.app.Activity;import android.content.Context;import android.os.Bundle;import android.util.Log;import android.view.View;import android.widget.Button;import com.eiffelyk.signetfulldemo.R;import java.util.Map;import cn.org.bjca.signet.component.core.activity.SignetCoreApi;import cn.org.bjca.signet.component.core.activity.SignetToolApi;import cn.org.bjca.signet.component.core.bean.results.FindBackUserResult;import cn.org.bjca.signet.component.core.bean.results.RegisterResult;import cn.org.bjca.signet.component.core.bean.results.SignetBaseResult;import cn.org.bjca.signet.component.core.bean.results.UserStateResult;import cn.org.bjca.signet.component.core.callback.CheckStateCallBack;import cn.org.bjca.signet.component.core.callback.FindBackUserCallBack;import cn.org.bjca.signet.component.core.callback.OcrCallBack;import cn.org.bjca.signet.component.core.callback.RegisterCallBack;import cn.org.bjca.signet.component.core.callback.SetFingerCallBack;import cn.org.bjca.signet.component.core.enums.CertType;import cn.org.bjca.signet.component.core.enums.FindBackType;import cn.org.bjca.signet.component.core.enums.IdCardType;import cn.org.bjca.signet.component.core.enums.OcrOperType;import cn.org.bjca.signet.component.core.enums.RegisterType;import cn.org.bjca.signet.component.core.enums.SetFingerOperType;/** * 生命周期相关接口功能展示页，展示个人/企业用户的激活码/扫码激活、自注册、传参找回、输入信息找回、查询用户状态、清除本地证书等各功能接口的调用 */public class TestLifeTimeApiActivity extends Activity implements View.OnClickListener {    private Button btnUserRegister, btnPinRegister, btnQRReg, btnFindBackUser, btnPinFindBackUser, btnFindBackEnterprise, btnPinFindBackEnter, btnFindBackUserBySignet, btnSelfReg, btnReqOfflineCert, btnClearCert, btnCheckKeyState;    private static String TAG = TestLifeTimeApiActivity.class.getSimpleName();    private Context mContext = TestLifeTimeApiActivity.this;//    private String activeCode = "{\"version\":\"2.0\",\"operType\":\"ActiveUser\",\"data\":\"1234567890\"}";  //个人用户激活使用的JSON串    private String activeCode = "{\"version\":\"2.0\",\"operType\":\"ActiveUser\",\"data\":\"381a38cd\"}";  //个人用户激活使用的JSON串//    private String  activeCode = "{\"version\":\"2.0\",\"operType\":\"ActiveEnterpriseOperator\",\"data\":\"ed33d967\"}";//企业用户激活使用的JSON串    private String userName = "唐彪";  //个人用户姓名    private String userCardNumber = "500225198309060312"; //个人用户证件号码    private IdCardType userCardType = IdCardType.SF;  //个人用户证件类型    private String enterOwnerName = "秦始皇";    //企业证书持有者姓名    private String enterOwnerNumber = "410500198003131664";   //企业证书持有者身份证号码(企业证书办理业务所需安全环境较高，因此证件必须为身份证)    private String enterOrg = "111333555777999";    //企业唯一标识    private String pin = "111111";    //传pin激活/找回证书时，由业务应用传入的pin码，用于替代用户设置的方式    private String msspID = "6db08148727abefb55bef4ab05b7f8f8f976094a7ef6f64a24645d236d5d169c";   //用户在云服务系统中的唯一标识//    private String msspID="ENA_2386699a-acce-4144-a5d9-16fafd167c55";   //用户在云服务系统中的唯一标识，企业用户一般以"ENA_"开头    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_test_api_lifetime);        btnUserRegister = findViewById(R.id.btn_api_register);        btnUserRegister.setOnClickListener(this);        btnPinRegister = findViewById(R.id.btn_api_pin_register);        btnPinRegister.setOnClickListener(this);        btnQRReg = findViewById(R.id.btn_api_qrreg);        btnQRReg.setOnClickListener(this);        btnFindBackUser = findViewById(R.id.btn_api_findBack_user);        btnFindBackUser.setOnClickListener(this);        btnPinFindBackUser = findViewById(R.id.btn_api_pin_findBack_user);        btnPinFindBackUser.setOnClickListener(this);        btnFindBackEnterprise = findViewById(R.id.btn_api_findBack_enterprise);        btnFindBackEnterprise.setOnClickListener(this);        btnPinFindBackEnter = findViewById(R.id.btn_api_pin_findBack_enterprise);        btnPinFindBackEnter.setOnClickListener(this);        btnFindBackUserBySignet = findViewById(R.id.btn_api_findBack_bySignet);        btnFindBackUserBySignet.setOnClickListener(this);        btnSelfReg = findViewById(R.id.btn_api_selfreg);        btnSelfReg.setOnClickListener(this);        btnReqOfflineCert = findViewById(R.id.btn_api_req_offlinecert);        btnReqOfflineCert.setOnClickListener(this);        btnClearCert = findViewById(R.id.btn_api_clear_cert);        btnClearCert.setOnClickListener(this);        btnCheckKeyState = findViewById(R.id.btn_api_check_key_state);        btnCheckKeyState.setOnClickListener(this);    }    @Override    public void onClick(View v) {        switch (v.getId()) {            //个人/企业用户的激活码激活，对不同类型的用户（个人/企业）需构造不同的JSON串            //激活JSON串中，data属性为业务应用向云服务后台推送可信用户信息获取的8位长度激活码            case R.id.btn_api_register:                SignetCoreApi.useCoreFunc(new RegisterCallBack(mContext, activeCode, RegisterType.COORDINATE) {                    @Override                    public void onRegisterResult(RegisterResult result) {                       DemoUtils.toastInfo(mContext,result);                    }                });                break;            //个人/企业传pin与激活码激活，对不同类型的用户（个人/企业）需构造不同的JSON串            //激活JSON串中，data属性为业务应用向云服务后台推送可信用户信息获取的8位长度激活码            case R.id.btn_api_pin_register:                SignetCoreApi.useCoreFunc(new RegisterCallBack(mContext, activeCode, RegisterType.COORDINATE, pin) {                    @Override                    public void onRegisterResult(RegisterResult result) {                        DemoUtils.toastInfo(mContext,result);                    }                });                break;            //扫码激活个人/企业用户            case R.id.btn_api_qrreg:                //接口调用                SignetCoreApi.useCoreFunc(new RegisterCallBack(this) {                    @Override                    public void onRegisterResult(RegisterResult result) {                        DemoUtils.toastInfo(mContext,result);                    }                });                break;            //使用传个人信息方式找回个人用户            case R.id.btn_api_findBack_user:                //接口调用                SignetCoreApi.useCoreFunc(new FindBackUserCallBack(mContext, userName, userCardNumber, userCardType) {                    @Override                    public void onFindBackResult(FindBackUserResult result) {                        DemoUtils.toastInfo(mContext,result);                    }                });                break;            //使用传个人信息与pin码方式找回个人用户            case R.id.btn_api_pin_findBack_user:                //接口调用                SignetCoreApi.useCoreFunc(new FindBackUserCallBack(mContext, userName, userCardNumber, userCardType, pin) {                    @Override                    public void onFindBackResult(FindBackUserResult result) {                        DemoUtils.toastInfo(mContext,result);                    }                });                break;            //使用传企业用户信息方式找回企业证书            case R.id.btn_api_findBack_enterprise:                //接口调用                SignetCoreApi.useCoreFunc(new FindBackUserCallBack(this, enterOwnerName, enterOwnerNumber, enterOrg) {                    @Override                    public void onFindBackResult(FindBackUserResult result) {                        DemoUtils.toastInfo(mContext,result);                    }                });                break;            //使用传企业用户信息与pin方式找回企业证书            case R.id.btn_api_pin_findBack_enterprise:                //接口调用                SignetCoreApi.useCoreFunc(new FindBackUserCallBack(this, enterOwnerName, enterOwnerNumber, enterOrg, pin) {                    @Override                    public void onFindBackResult(FindBackUserResult result) {                        DemoUtils.toastInfo(mContext,result);                    }                });                break;            //使用输入个人/企业用户信息方式找回证书            //第二个参数控制页面类型，FindBackType.FINDBACK_USER显示个人用户信息填写页面，FindBackType.FINDBACK_ENTERPRISE显示企业用户信息填写页面            case R.id.btn_api_findBack_bySignet:                //接口调用                SignetCoreApi.useCoreFunc(                        new FindBackUserCallBack(this, FindBackType.FINDBACK_USER) {                            @Override                            public void onFindBackResult(FindBackUserResult result) {                                DemoUtils.toastInfo(mContext,result);                            }                        });                break;            //自注册，通过拍摄身份证采集用户信息，由用户端发起激活（不同于业务应用后台推送可信用户信息模式）            // WARNING:该接口需要业务应用在云服务后台开通自注册功能，且客户端需要集成相关.so库，详见接口文档            case R.id.btn_api_selfreg:                //接口调用                SignetCoreApi.useCoreFunc(new OcrCallBack(this, OcrOperType.REGISTER) {                    @Override                    public void onOcrResult(Map<String, String> ocrResultMap) {                        DemoUtils.toastInfo(mContext, ocrResultMap.toString());                    }                });                break;            //用户申请离线证书            //WARNING:该接口需要业务应用在云服务后台开通离线证书功能，否则接口调用失败，且出于安全因素考虑仅支持个人用户申请离线证书            case R.id.btn_api_req_offlinecert:                //接口调用                SignetCoreApi.useCoreFunc(new RegisterCallBack(this, msspID, RegisterType.OFFLINE) {                    @Override                    public void onRegisterResult(RegisterResult result) {                       DemoUtils.toastInfo(mContext,result);                    }                });                break;            //清除本地证书            case R.id.btn_api_clear_cert:                //接口调用                SignetBaseResult result = SignetToolApi.clearCert(mContext, msspID, CertType.ALL_CERT);                DemoUtils.toastInfo(mContext,result);                break;            //检查用户及证书状态            case R.id.btn_api_check_key_state:                //接口调用                SignetCoreApi.useCoreFunc(new CheckStateCallBack(this, msspID) {                    @Override                    public void onCheckKeyStateResult(UserStateResult result) {                        DemoUtils.toastInfo(mContext,result);                    }                });                break;            default:                break;        }    }}